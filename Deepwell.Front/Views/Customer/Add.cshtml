@model Deepwell.Front.Models.Customer.CustomerViewModel

@{
    ViewBag.Title = "Add";
}

<div class="container">
    <div class="main_heading">
        <h1 class="">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path d="M12,1L3,5v6c0,5.55,3.84,10.74,9,12c5.16-1.26,9-6.45,9-12V5L12,1z M19,11c0,4.52-2.98,8.69-7,9.93
         			C7.98,19.69,5,15.52,5,11V6.3l7-3.11l7,3.11V11z" />
                <polygon points="7.41,11.59 6,13 10,17 18,9 16.59,7.58 10,14.17" />
            </svg>
            Add New Customer
        </h1>

        <div class="right_btns">
            <a href=@Url.Action("Index", "Customer")>
                <input type="button" value="All customers" class="link_btn" />
            </a>
        </div>
    </div>

    <div class="top_msgs">
        @ViewBag.Message
    </div>

    @using (Html.BeginForm("Add", "Customer", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()

    <div class="form_panel_g">
        @Html.ValidationSummary(true, "", new { @class = "text-danger", @style = "color:red" })
        <div class="clr_ht"></div>

        <div class="divider_hd">
            <span class="txt">CUSTOMER DETAILS</span>
        </div>

        <div class="row">

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.CustomerNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CustomerNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustomerNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.CustomerStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.CustomerStatus, Model.CustomerStatusOptions, new { @class = "form-control" })
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.CustomerType, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.CustomerType, Model.CustomerTypeOptions, new { @class = "form-control" })
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.BillingType, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.BillingType, Model.BillingTypeOptions, new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="clr_ht"></div>

        <div class="row">
            <div class="col col_33 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    <div class="checkbox">
                        <label class="toggler">
                            @Html.LabelFor(model => model.IsTaxable, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.CheckBoxFor(model => model.IsTaxable, htmlAttributes: new { @checked = true })
                            <span class="checkbox--control"></span>
                        </label>
                        @Html.ValidationMessageFor(model => model.IsTaxable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col_20 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.CustomerPricingSettings, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.CustomerPricingSettings, Model.CustomerPricingSettingsOptions, new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="clr_ht"></div>
        <div class="divider_hd mr_tp_20">
            <span class="txt">Address DETAILS</span>
        </div>

        <div class="row">
            <div class="col col_50 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Address.WellName, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Address.WellName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.WellName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_50 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Address.County, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Address.County, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.County, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_33 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Address.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Address.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_33 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Address.States, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.Address.StateId, Model.Address.States, "Select State")
                    @Html.ValidationMessageFor(model => model.Address.StateId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col col_33 pd_both">
                <div class="ctrl_group">
                    @Html.LabelFor(model => model.Address.Zipcode, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Address.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address.Zipcode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="btn_pnl">
            <input type="submit" value="Save" class="link_btn" />
            <a href=@Url.Action("Index", "Customer") class="link_btn faded">Cancel</a>
        </div>
    </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script  type="text/javascript">
        $('#Phone').on("keyup paste blur", function (event) {

                // Don't run for backspace key entry, otherwise it bugs out
                if (event.which != 8) {

                    // Remove invalid chars from the input
                    var input = this.value.replace(/[^0-9\(\)\s\-]/g, "");
                    var inputlen = input.length;
                    // Get just the numbers in the input
                    var numbers = this.value.replace(/\D/g, '');
                    var numberslen = numbers.length;
                    // Value to store the masked input
                    var newval = "";

                    // Loop through the existing numbers and apply the mask
                    for (var i = 0; i < numberslen; i++) {
                        if (i == 0) newval = "(" + numbers[i];
                        else if (i == 2) newval += numbers[i] + ") ";
                        else if (i == 6) newval += "-" + numbers[i];
                        else newval += numbers[i];
                    }

                    // Re-add the non-digit characters to the end of the input that the user entered and that match the mask.
                    if (inputlen >= 1 && numberslen == 0 && input[0] == "(") newval = "(";
                        // else if(inputlen>=6&&numberslen==3&&input[4]==")"&&input[5]==" ") newval+=") ";
                    else if (inputlen >= 5 && numberslen == 3 && input[4] == ")") newval += " ";
                    else if (inputlen >= 6 && numberslen == 3 && input[5] == " ") newval += " ";
                    else if (inputlen >= 10 && numberslen == 6 && input[9] == "-") newval += "-";

                    $(this).val(newval.substring(0, 14));

                }
            });

    </script>
}

